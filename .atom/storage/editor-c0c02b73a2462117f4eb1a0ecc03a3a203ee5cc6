{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1280,"height":773,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook"],"buffers":[{"text":"###\n Handle webhooks from various callers.\n\nThe configuration file indicates the 'apps' that we route messages to\nThe other side of the queues handle the different types of webhooks.  This is\nessentially just a webhook clearing house to handle the inbound flux.\n\nNote that the queues are persistent so that if the server goes down then the\nmessages are retained.\n\nAt the moment, the response to a webhook is a 200 or a 500 depending on whether\nwe accepted it or not.  We accept everything to the queue if we can!\n###\namqp = require('amqp')\n\nconfig = require('../config')\n\nconfig = config.development\n\nMQ_url = config.amqp?.url\nMQ_exchange_name = config.amqp?.exchange.name or throw(\"No exchange name given\")\nMQ_exchange_options = config.amqp?.exchange?.options or {}\nMQ_routing_key = config.amqp?.routing_key_prefix\nMQ_apps = config.apps or []\nconsole.log \"apps: \" + MQ_apps\n\n# cache the connection to the exchange.\nconnection = null\nexchange = null\ncurrent_callback = null\n\n###\nprivate publish(message, callback) - publishes a message to the queue.\n\npayload: JSON string for message to send.\ncallback: (err) -> : callback when this operation completes\n###\nexports.publish = (payload, queue, callback) ->\n  if not(queue in MQ_apps)\n    return callback(\"App: '#{queue}' is not handled! \")\n\n  queue = MQ_routing_key + queue\n  get_connection (err, connection, exchange) ->\n    if err then return callback(err)\n    console.log \"Publising to queue #{queue}\"\n    exchange.publish queue, payload, {mandatory: true}\n    # try\n      # connection.end()\n    return callback(null)\n\n\n\nget_connection = (callback) ->\n  current_callback = callback\n  if connection != null then return current_callback(null, connection, exchange)\n\n  connection = amqp.createConnection({url: MQ_url})\n  connection.on 'ready', ->\n    # console.log MQ_exchange_name\n    # console.log MQ_exchange_options\n    exchange = connection.exchange MQ_exchange_name, MQ_exchange_options\n\n    exchange.on 'open', ->\n      current_callback(null, connection, exchange)\n\n  connection.on 'error', (err) ->\n    console.log \"connection error: \" + err\n    connection.end()\n    console.log \"killed connection?\"\n    return current_callback(\"Publish Error: \" + err)\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/webhook.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1adecfe67facb450a5506a8a470618a27f61fe24","deserializer":"TextBuffer"},{"text":"###\nNode Sendgrid Webhook server.\n###\n\nbasicAuth   = require 'connect-basic-auth'\nconnect     = require 'connect'\nexpress     = require 'express'\n\ncfg         = require('./config')()\n# console.log  cfg\nroutes      = require './routes'\n\n\nport = process.env.PORT or cfg_metrics?.port or 3000\n#set some defaults - runing thought run-coffee-development.sh will set admin:password as credentials\n\nBASIC_USER = process.env.BASIC_USER or cfg_metrics?.basic_user or \"websand\"\nBASIC_PASSWORD = process.env.BASIC_PASSWORD or cfg_metrics?.basic_password or \"password\"\nif process.env.DEVELOPMENT?\n  console.log \"Basic auth user: \" + BASIC_USER\n  console.log \"Basic auth password: \" + BASIC_PASSWORD\n\n###\n# Setup\n###\n\n# server = express.createServer()\nserver = express()\nserver.configure ->\n  server.set 'views', __dirname + '/../views'\n  server.set 'view options',\n    layout: false\n    pretty: true\n\n  # server.use basicAuth (credentials, req, res, next)->\n  #   if ((credentials.username == BASIC_USER) and (credentials.password == BASIC_PASSWORD))\n  #     next()\n  #   else\n  #     res.send 'auth_failed', 403\n\n  server.use connect.urlencoded()\n  server.use connect.json()\n  ###\n  Use /static for all statics so these can be served nginx in production\n  ###\n  server.use '/static', express.static(__dirname + '/../static/')\n  server.use server.router\n\nconsole.log(__dirname)\n\n# server.error (err, req, res, next) ->\nserver.use (err, req, res, next) ->\n  if err instanceof NotFound\n    res.render '404.jade',\n      locals:\n        title: '404 - Not Found'\n      status: 404\n  else\n    console.log err\n    res.render '500.jade',\n      locals:\n        title: 'The Server Encountered an Error'\n        error: err\n      status: 500\n\n# server.dynamicHelpers\n#   basePath: (req, res) ->\n#     # return 'http://' + req.headers.host + '/metrics-dashboard'\n#     return ''\n\n###\n# Routes\n###\n# server.all '*', (req, res, next) -> req.requireAuthorization req, res, next\n\nserver.get '/', routes.GET_overview\nserver.get '/overview', routes.GET_overview\n\nserver.post '/hook/:app_name', routes.POST_process_webhook\n\n# Error message.\nserver.get '/500', (req, res) ->\n  throw new Error('This is a 500 Error')\n\nserver.get '/*', (req, res) ->\n  console.log \"Didn't find: \" + req.url\n  throw new NotFound(\"/*\")\n\nNotFound = (msg) ->\n  console.log 'Not found' + msg\n  @name = 'NotFound'\n  Error.call this, msg\n  Error.captureStackTrace this, arguments.callee\n\nserver.listen port\nconsole.log 'Listening on http://0.0.0.0:' + port\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/server.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f1b0507e7bd176764830e11fa089446d3cea87a9","deserializer":"TextBuffer"},{"text":"_ = require 'underscore'\n\nwebhook = require './webhook'\n\n###\n# Overview metrics route\n###\nexports.GET_overview = (req, res) ->\n  res.render 'overview.jade',\n    locals:\n      test_local: 1\n\n\n# handle a POST webhook\nexports.POST_process_webhook = (req, res, next) ->\n  queue = req.params.app_name\n  console.log \"app_name: \" + queue\n  console.log \"body: \"\n  console.log req.body\n\n  webhook.publish req.body, queue, (err) ->\n    if err\n      console.log(\"publish error: \" + err)\n      res.send(500)\n    else\n      res.send(200)\n\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/routes.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b616d4c592576d70bd451a784e9a263895cbcda0","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"editorWidthInChars":null,"scrollTop":590,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/webhook.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":true,"editorWidthInChars":null,"scrollTop":1058,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/server.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/routes.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/webhook.coffee","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-coffee-script","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/webhook.coffee":1428773501403,"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/server.coffee":1428773462106,"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/routes.coffee":1428773480497},"metrics":{"sessionLength":9786843},"tree-view":{"directoryExpansionStates":{"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"config":{"isExpanded":false,"entries":{}},"other-packages":{"isExpanded":false,"entries":{}},"src":{"isExpanded":true,"entries":{"browser":{"isExpanded":false,"entries":{}}}},"static":{"isExpanded":false,"entries":{}},"test":{"isExpanded":false,"entries":{}},"views":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/alex/Projects/Websand/devops3/development/src/ws-sendgrid-webhook/src/webhook.coffee","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}