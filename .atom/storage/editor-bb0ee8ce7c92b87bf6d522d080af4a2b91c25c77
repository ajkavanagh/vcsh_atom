{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1280,"height":773,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp"],"buffers":[{"text":"// Generated on 2014-03-05 using generator-angular 0.7.1\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/**/*.js'\n\nmodule.exports = function(grunt) {\n\n  // Load grunt tasks automatically\n  require('load-grunt-tasks')(grunt);\n\n  // we need rewriting to work for HTML5 mode in angularjs\n  var modRewrite = require('connect-modrewrite');\n\n  // Time how long tasks take. Can help when optimizing build times\n  require('time-grunt')(grunt);\n\n  // Define the configuration for all the tasks\n  grunt.initConfig({\n\n    // Project settings\n    yeoman: {\n      // configurable paths\n      app: require('./bower.json').appPath || 'app',\n      dist: 'dist'\n    },\n\n    // lets lint our coffeescript files and test coffeescript files.\n    coffeelint: {\n      app: ['<%= yeoman.app %>/scripts/**/*.coffee', 'test/**/*.coffee']\n    },\n\n    // Watches files for changes and runs tasks based on the changed files\n    watch: {\n      js: {\n        files: ['<%= yeoman.app %>/scripts/{,*/}*.js'],\n        tasks: ['newer:jshint:all'],\n        options: {\n          livereload: true\n        }\n      },\n      jsTest: {\n        files: ['test/spec/{,*/}*.js'],\n        tasks: ['newer:jshint:test', 'karma']\n      },\n      coffee: {\n        files: ['<%= yeoman.app %>/scripts/{,*/}*.{coffee,litcoffee,coffee.md}'],\n        tasks: ['newer:copy:coffee', 'newer:coffee:dist']\n      },\n      coffeeTest: {\n        files: ['test/spec/{,*/}*.{coffee,litcoffee,coffee.md}'],\n        tasks: ['newer:coffee:test', 'karma']\n      },\n      compass: {\n        files: ['<%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n        tasks: ['compass:server', 'autoprefixer']\n      },\n      gruntfile: {\n        files: ['Gruntfile.js']\n      },\n      livereload: {\n        options: {\n          livereload: '<%= connect.options.livereload %>'\n        },\n        files: [\n          '<%= yeoman.app %>/{,*/}*.html',\n          '.tmp/styles/{,*/}*.css',\n          '.tmp/scripts/{,*/}*.js',\n          '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n        ]\n      }\n    },\n\n    // The actual grunt server settings\n    connect: {\n      options: {\n        port: 9000,\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: '0.0.0.0',\n        livereload: 35729\n      },\n      proxies: [{\n        context: '/api', // the context of the data service\n        host: 'localhost', // wherever the data service is running\n        port: 6543 // the port tha pyramid is running on\n      }],\n      livereload: {\n        options: {\n          open: false,\n          base: [\n            '.tmp',\n            '<%= yeoman.app %>'\n          ],\n          middleware: function (connect, options) {\n            var middlewares = [];\n            var directory = options.directory || options.base[options.base.length - 1];\n\n            if (!Array.isArray(options.base)) {\n              options.base = [options.base];\n            }\n\n            // Setup the proxy FIRST\n            middlewares.push(require('grunt-connect-proxy/lib/utils').proxyRequest);\n\n            // Then do rewrites for AngularJS\n            // middlewares.push(modRewrite(['!\\\\.html|\\\\.js|\\\\.svg|\\\\.css|\\\\.png|\\\\.jpg$ /index.html [L]']));\n\n            // Serve static files\n            options.base.forEach(function(base) {\n              middlewares.push(connect.static(base));\n            });\n\n            // Make directory browse-able.\n            middlewares.push(connect.directory(directory));\n\n            return middlewares;\n          }\n        }\n      },\n      test: {\n        options: {\n          port: 9001,\n          base: [\n            '.tmp',\n            'test',\n            '<%= yeoman.app %>'\n          ]\n        }\n      },\n      dist: {\n        options: {\n          base: '<%= yeoman.dist %>'\n        }\n      }\n    },\n\n    // Make sure code styles are up to par and there are no obvious mistakes\n    // jshint: {\n    //   options: {\n    //     jshintrc: '.jshintrc',\n    //     reporter: require('jshint-stylish')\n    //   },\n    //   all: [\n    //     'Gruntfile.js'\n    //   ]\n    // },\n   jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        reporter: require('jshint-stylish')\n      },\n      all: [\n        'Gruntfile.js',\n        '<%= yeoman.app %>/scripts/{,*/}*.js'\n      ],\n      test: {\n        options: {\n          jshintrc: 'test/.jshintrc'\n        },\n        src: ['test/spec/{,*/}*.js']\n      }\n    },\n\n    // Empties folders to start fresh\n    clean: {\n      dist: {\n        files: [{\n          dot: true,\n          src: [\n            '.tmp',\n            '<%= yeoman.dist %>/*',\n            '!<%= yeoman.dist %>/.git*'\n          ]\n        }]\n      },\n      server: '.tmp'\n    },\n\n    // Add vendor prefixed styles\n    autoprefixer: {\n      options: {\n        browsers: ['last 1 version']\n      },\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/styles/',\n          src: '{,*/}*.css',\n          dest: '.tmp/styles/'\n        }]\n      }\n    },\n\n    // Automatically inject Bower components into the app\n    'bower-install': {\n      app: {\n        html: '<%= yeoman.app %>/index.html',\n        ignorePath: '<%= yeoman.app %>/'\n      }\n    },\n\n    // Compiles CoffeeScript to JavaScript\n    coffee: {\n      dist: {\n        options: {\n          sourceMap: true,\n          // sourceRoot: ''\n          // bare: true\n        },\n        files: [{\n          expand: true,\n          // cwd: '<%= yeoman.app %>/scripts',\n          cwd: '.tmp/scripts',\n          src: '{,*/}*.coffee',\n          dest: '.tmp/scripts',\n          ext: '.js'\n        }]\n      },\n      test: {\n        files: [{\n          expand: true,\n          cwd: 'test/spec',\n          src: '{,*/}*.coffee',\n          dest: '.tmp/spec',\n          ext: '.js'\n        }]\n      }\n    },\n\n\n    // Compiles Sass to CSS and generates necessary files if requested\n    compass: {\n      options: {\n        sassDir: '<%= yeoman.app %>/styles',\n        cssDir: '.tmp/styles',\n        generatedImagesDir: '.tmp/images/generated',\n        imagesDir: '<%= yeoman.app %>/images',\n        // javascriptsDir: '<%= yeoman.app %>/scripts',\n        javascriptsDir: '.tmp/scripts',\n        fontsDir: '<%= yeoman.app %>/styles/fonts',\n        importPath: '<%= yeoman.app %>/bower_components',\n        httpImagesPath: '/images',\n        httpGeneratedImagesPath: '/images/generated',\n        httpFontsPath: '/styles/fonts',\n        relativeAssets: false,\n        assetCacheBuster: false,\n        raw: 'Sass::Script::Number.precision = 10\\n'\n      },\n      dist: {\n        options: {\n          generatedImagesDir: '<%= yeoman.dist %>/images/generated'\n        }\n      },\n      server: {\n        options: {\n          debugInfo: true\n        }\n      }\n    },\n\n    // Renames files for browser caching purposes\n    rev: {\n      dist: {\n        files: {\n          src: [\n            '<%= yeoman.dist %>/scripts/{,*/}*.js',\n            '<%= yeoman.dist %>/styles/{,*/}*.css',\n            //'<%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',\n            '<%= yeoman.dist %>/styles/fonts/*'\n          ]\n        }\n      }\n    },\n\n    // Reads HTML for usemin blocks to enable smart builds that automatically\n    // concat, minify and revision files. Creates configurations in memory so\n    // additional tasks can operate on them\n    useminPrepare: {\n      html: '<%= yeoman.app %>/index.html',\n      options: {\n        dest: '<%= yeoman.dist %>'\n      }\n    },\n\n    // Performs rewrites based on rev and the useminPrepare configuration\n    usemin: {\n      html: ['<%= yeoman.dist %>/{,*/}*.html'],\n      css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],\n      options: {\n        assetsDirs: ['<%= yeoman.dist %>']\n      }\n    },\n\n    // The following *-min tasks produce minified files in the dist folder\n    imagemin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.app %>/images',\n          src: '{,*/}*.{png,jpg,jpeg,gif}',\n          dest: '<%= yeoman.dist %>/images'\n        }]\n      }\n    },\n    svgmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.app %>/images',\n          src: '{,*/}*.svg',\n          dest: '<%= yeoman.dist %>/images'\n        }]\n      }\n    },\n    htmlmin: {\n      dist: {\n        options: {\n          collapseWhitespace: true,\n          collapseBooleanAttributes: true,\n          removeCommentsFromCDATA: true,\n          removeOptionalTags: true\n        },\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.dist %>',\n          src: ['*.html', 'views/{,*/}*.html'],\n          dest: '<%= yeoman.dist %>'\n        }]\n      }\n    },\n\n    // Allow the use of non-minsafe AngularJS files. Automatically makes it\n    // minsafe compatible so Uglify does not destroy the ng references\n    ngmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/concat/scripts',\n          src: '*.js',\n          dest: '.tmp/concat/scripts'\n        }]\n      }\n    },\n\n    // Replace Google CDN references\n    cdnify: {\n      dist: {\n        html: ['<%= yeoman.dist %>/*.html']\n      }\n    },\n\n    // Copies remaining files to places other tasks can use\n    copy: {\n      coffee: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%= yeoman.app %>/scripts',\n          dest: '.tmp/scripts',\n          src: '**/*.coffee'\n        }]\n      },\n      dist: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%= yeoman.app %>',\n          dest: '<%= yeoman.dist %>',\n          src: [\n            '*.{ico,png,txt}',\n            '.htaccess',\n            '*.html',\n            'views/{,*/}*.html',\n            'bower_components/**/*',\n            'images/{,*/}*.{webp}',\n            'fonts/*'\n          ]\n        },\n        {\n            expand: true,\n            cwd: '.tmp/images',\n            dest: '<%= yeoman.dist %>/images',\n            src: ['generated/*']\n        }]\n\n//        },\n//        // add this rule to copy the fonts:\n//        {\n//          expand: true,\n//          flatten: true,\n//          cwd: '<%= yeoman.app %>',\n//          dest: '<%= yeoman.dist %>/fonts',\n//          src: ['bower_components/sass-bootstrap/fonts/*.*']\n//        }]\n      },\n      styles: {\n        expand: true,\n        cwd: '<%= yeoman.app %>/styles',\n        dest: '.tmp/styles/',\n        src: '{,*/}*.css'\n      }\n    },\n\n    // Run some tasks in parallel to speed up the build process\n    concurrent: {\n      server: [\n        'copy:coffee',\n        'coffee:dist',\n        'compass:server'\n      ],\n      test: [\n        'copy:coffee',\n        'coffee',\n        'compass'\n      ],\n      dist: [\n        'coffee',\n        'compass:dist',\n        'imagemin',\n        'svgmin'\n      ]\n    },\n\n    // By default, your `index.html`'s <!-- Usemin block --> will take care of\n    // minification. These next options are pre-configured if you do not wish\n    // to use the Usemin blocks.\n    // cssmin: {\n    //   dist: {\n    //     files: {\n    //       '<%= yeoman.dist %>/styles/main.css': [\n    //         '.tmp/styles/{,*/}*.css',\n    //         '<%= yeoman.app %>/styles/{,*/}*.css'\n    //       ]\n    //     }\n    //   }\n    // },\n    // uglify: {\n    //   dist: {\n    //     files: {\n    //       '<%= yeoman.dist %>/scripts/scripts.js': [\n    //         '<%= yeoman.dist %>/scripts/scripts.js'\n    //       ]\n    //     }\n    //   }\n    // },\n    // concat: {\n    //   dist: {}\n    // },\n\n    // Test settings\n    karma: {\n      unit: {\n        configFile: 'karma.conf.js',\n        singleRun: true\n      }\n    }\n  });\n\n\n  grunt.registerTask('serve', function (target) {\n    if (target === 'dist') {\n      return grunt.task.run(['build', 'connect:dist:keepalive']);\n    }\n\n    grunt.task.run([\n      'clean:server',\n      'bower-install',\n      // 'concurrent:server',\n      'copy:coffee',\n      'coffee:dist',\n      'compass:server',\n      'autoprefixer',\n      'configureProxies:server',  // let's make a proxy!\n      'connect:livereload',\n      'watch'\n    ]);\n  });\n\n  grunt.registerTask('server', function () {\n    grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n    grunt.task.run(['serve']);\n  });\n\n  grunt.registerTask('test', [\n    'clean:server',\n    // 'concurrent:test',\n    'copy:coffee',\n    'coffee',\n    'compass',\n    'autoprefixer',\n    'connect:test',\n    'karma'\n  ]);\n\n  grunt.registerTask('build', [\n    'clean:dist',\n    'bower-install',\n    'useminPrepare',\n    'concurrent:dist',\n    'autoprefixer',\n    'concat',\n    'ngmin',\n    'copy:dist',\n    'cdnify',\n    'cssmin',\n    'uglify',\n    'rev',\n    'usemin',\n    'htmlmin'\n  ]);\n\n  grunt.registerTask('default', [\n    'newer:jshint',\n    'newer:coffeelint',\n    'test',\n    'build'\n  ]);\n};\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4,"goalBufferRange":null},"deserializer":"Marker"},"10":{"id":10,"range":[[50,0],[50,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[240,0],[241,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"32":{"id":32,"range":[[50,0],[50,57]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"33":{"id":33,"range":[[240,0],[241,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/Gruntfile.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7564f1cb59d2c36ca110f978cd76e57534ec8815","deserializer":"TextBuffer"},{"text":"'use strict'\n\ndescribe 'Controller: SearchCtrl', () ->\n\n  # load the controller's module\n  beforeEach module 'websandAngApp'\n\n  SearchCtrl = {}\n  scope = {}\n  httpBackend = {}\n  compile = {}\n  location = {}\n  rootScope = {}\n\n  criteria_types = {\n          'crit1': [\n            {criteria: 'crit_desc_1', type: 'none', functions: []}\n            {criteria: 'crit_desc_2', type: 'none', functions: []}\n            {criteria: 'crit_desc_3', type: 'none', functions: []}\n          ],\n          'crit2': [\n            {criteria: 'crit_desc_4', type: 'none', functions: []}\n            {criteria: 'crit_desc_5', type: 'none', functions: []}\n            {criteria: 'crit_desc_6', type: 'none', functions: []}\n          ],\n          'crit3': [\n            {criteria: 'crit_desc_7', type: 'none', functions: []}\n            {criteria: 'crit_desc_8', type: 'none', functions: []}\n            {criteria: 'crit_desc_9', type: 'none', functions: []}\n          ],\n        }\n  table_list = ['table_1','table_2','table_3']\n  table_metadata = {\n         'table_1':{'fields':[{'name':'tb1_crit1','type':'crit_1'},\n                              {'name':'tb1_crit2','type':'crit_2'},\n                              {'name':'tb1_crit3','type':'crit_3'}],'relationships':['table_2'],\n         'table_2':{'fields':[{'name':'tb2_crit1','type':'crit_1'},\n                              {'name':'tb2_crit2','type':'crit_2'},\n                              {'name':'tb2_crit3','type':'crit_3'}],'relationships':['table_3']},\n         'table_3':{'fields':[{'name':'tb3_crit1','type':'crit_1'},\n                              {'name':'tb3_crit2','type':'crit_2'},\n                              {'name':'tb3_crit3','type':'crit_3'}],'relationships':[]}}}\n  criteria_enum =\n    crit_desc_1: 'crit_desc_1_d'\n    crit_desc_2: 'crit_desc_2_d'\n    crit_desc_3: 'crit_desc_3_d'\n    crit_desc_4: 'crit_desc_4_d'\n    crit_desc_5: 'crit_desc_5_d'\n    crit_desc_6: 'crit_desc_6_d'\n    crit_desc_7: 'crit_desc_7_d'\n    crit_desc_8: 'crit_desc_8_d'\n    crit_desc_9: 'crit_desc_9_d'\n\n  html_req = '<div id=\"ws_query_window\"><span id=\"ws_table_column\">\n        <span ng-repeat=\"table in table_list\">\n        <button class=\"btn ws_table_button\" ng-click=\"table_clicked(table)\">\n        {{table}}</button><br></span></span></div>'\n\n  standard_new_data = ->\n    [\n      {\n        'criteria': [\n          {\n            'field_name': 'fn1'\n            'table_name': 'tn1'\n            'type': 'type1'\n            'link': 'lnk1'\n            'chosen_value': 'val1'\n            # 'criteria_chosen': 'crit1'\n            'criteria_chosen': {criteria: 'crit1', type: 'type1', functions: []}\n\n          }\n          {\n            'field_name': 'fn2'\n            'table_name': 'tn2'\n            'type': 'type2'\n            'link': 'lnk2'\n            'chosen_value': 'val2'\n            # 'criteria_chosen': 'crit2'\n            'criteria_chosen': {criteria: 'crit2', type: 'type2', functions: []}\n          }\n        ]\n        'chosen_table': 'find_table'\n      }\n      {\n        'criteria': [\n          {\n            'field_name': 'fn3'\n            'table_name':'tn3'\n            'type': 'type3'\n            'link':'lnk3'\n            'chosen_value': 'val3'\n            # 'criteria_chosen': 'crit3'\n            'criteria_chosen': {criteria: 'crit3', type: 'type3', functions: []}\n          }\n          {\n            'field_name': 'fn4'\n            'table_name': 'tn4'\n            'type': 'type4'\n            'link': 'lnk4'\n            'chosen_value': 'val4'\n            # 'criteria_chosen':'crit4'\n            'criteria_chosen': {criteria: 'crit4', type: 'type4', functions: []}\n          }\n        ]\n      }\n    ]\n\n  standard_query = ->\n    {\n      \"data\": [\n        [\n          {\n            'field_name': 'fn1'\n            'table_name': 'tn1'\n            'type': 'type1'\n            'value': 'val1'\n            'criteria': 'crit1'\n            'link':'lnk1'\n          }\n          {\n            'field_name': 'fn2'\n            'table_name': 'tn2'\n            'type': 'type2'\n            'value': 'val2'\n            'criteria': 'crit2'\n            'link':'lnk2'\n          }\n        ]\n        [\n          {\n            'field_name': 'fn3'\n            'table_name': 'tn3'\n            'type': 'type3'\n            'value': 'val3'\n            'criteria': 'crit3'\n            'link':'lnk3'\n          }\n          {\n            'field_name': 'fn4'\n            'table_name': 'tn4'\n            'type': 'type4'\n            'value': 'val4'\n            'criteria': 'crit4'\n            'link': 'lnk4'\n          }\n        ]\n      ]\n      \"table_name\": \"find_table\"\n      \"name\": \"save_query_name\"\n      \"search_id\": ''\n    }\n\n  default_search_details = ->\n    {\n      'criteria_types':criteria_types\n      'table_list':table_list\n      'table_metadata':table_metadata\n      'criteria_enum': criteria_enum\n    }\n\n  handle_default_search_details_http = ->\n    httpBackend.expectGET('http://testserver/api/search/details')\n    .respond(default_search_details())\n    httpBackend.flush()\n\n\n  # Initialize the controller and a mock scope\n  beforeEach inject ($controller, $rootScope, $httpBackend, $compile, $location) ->\n    window.sessionStorage.setItem('urn:websandhq.co.uk/auth:instance:1','some_val')\n    window.sessionStorage.setItem('server_url', 'http://testserver/')\n    rootScope = $rootScope\n    scope = $rootScope.$new()\n    httpBackend = $httpBackend\n    SearchCtrl = $controller 'SearchCtrl', {\n      $scope: scope\n    }\n    location = $location\n    compile = $compile\n\n\n  afterEach ->\n    httpBackend.verifyNoOutstandingExpectation()\n    httpBackend.verifyNoOutstandingRequest()\n\n\n  it 'should not be null when created', () ->\n    handle_default_search_details_http()\n    expect(SearchCtrl).to.not.be.undefined\n    expect(httpBackend).to.not.be.undefined\n    expect(scope).to.not.be.undefined\n\n\n  it 'should respond to http when it has loaded', ->\n    handle_default_search_details_http()\n    expect(scope.CRITERIA_TYPES.crit1.length).to.be.equal(3)\n    expect(scope.CRITERIA_TYPES.crit2.length).to.be.equal(3)\n    expect(scope.CRITERIA_TYPES.crit3.length).to.be.equal(3)\n\n    i = 1\n    for item in scope.table_list\n      expect(item).to.be.equal('table_' + i)\n      i++\n\n\n  it 'should process the data correctly before posting to server', ->\n    handle_default_search_details_http()\n    #Arrange\n    scope.new_data = standard_new_data()\n    httpBackend.expectPOST('http://testserver/api/search/query', standard_query())\n    .respond({'status': 'ok'})\n\n    scope.search_name = 'save_query_name'\n\n    #Act\n    scope.save_button_pressed()\n\n    #Assert - check we were called with expected params\n    httpBackend.flush()\n\n\n  it 'should return to correct page when cancelling', () ->\n    handle_default_search_details_http()\n    expect(location.path()).to.be.equal('')\n\n    scope.cancel_search_create()\n\n    expect(location.path()).to.be.equal('/showsearch')\n\n    location.search('ret=randpage')\n\n    scope.cancel_search_create()\n    expect(location.path()).to.be.equal('/randpage')\n\n    #We shouldn't get the params as we don't have any\n    expect(location.search()['c']).to.be.equal(undefined)\n    expect(location.search()['a']).to.be.equal(undefined)\n\n    location.search('c=75&a=25&ret=anotherpage')\n    scope.cancel_search_create()\n    expect(location.search()['c']).to.be.equal('75')\n    expect(location.search()['a']).to.be.equal('25')\n\n  it 'should redirect to ret when successfully POSTing', () ->\n    handle_default_search_details_http()\n    scope.new_data = standard_new_data()\n    httpBackend.expectPOST('http://testserver/api/search/query', standard_query())\n    .respond({'status': 'ok', 'id_search': 24})\n\n    scope.search_name = 'save_query_name'\n    location.search('ret=randpage&c=47')\n\n    #Act\n    scope.save_button_pressed()\n\n    #Assert\n    httpBackend.flush()\n\n    expect(location.path()).to.be.equal('/randpage')\n    expect(location.search()['c']).to.be.equal('47')\n    expect(location.search()['a']).to.be.equal('24')\n\n  it 'should load in data for predefined search query', () ->\n    # When loading the page we should be able to grab a predefined query id\n    # from the url and use this to grab existing information for the search\n    search_object = get_data()\n    httpBackend.expectGET('http://testserver/api/search/details')\n    .respond(search_object)\n    httpBackend.flush()\n\n    #Sampling of data - as can't compare all fields\n    expect(scope.table_metadata.table1.fields[0].name).to.be.equal('t1f1')\n    expect(scope.table_metadata.table2.fields[1].name).to.be.equal('t2f2')\n    expect(scope.table_metadata.table3.fields[2].name).to.be.equal('t3f3')\n\n    #Check that new_data has been set correctly for first column ie.table clicked\n    expect(scope.new_data[0].chosen_table).to.be.equal('table3')\n    expect(scope.new_data[0].logical_name).to.be.equal('Table 3')\n    expect(scope.new_data[0].relationships.length).to.be.equal(1)\n    expect(scope.new_data[0].relationships[0]).to.be.equal('table2')\n    expect(scope.new_data[0].fields.length).to.be.equal(3)\n    expect(scope.new_data[0].fields[0].name).to.be.equal('t3f1')\n    expect(scope.new_data[0].fields[1].logical_name).to.be.equal('Table 3 Field 2')\n    expect(scope.new_data[0].fields[2].type).to.be.equal('type3')\n    expect(scope.new_data[0].fields[1].name).to.be.equal('t3f2')\n    expect(scope.new_data[0].fields[2].logical_name).to.be.equal('Table 3 Field 3')\n    expect(scope.new_data[0].fields[0].type).to.be.equal('type1')\n\n    #Check the other columns\n    expect(scope.new_data.length).to.be.equal(3)\n    expect(scope.new_data[1].criteria.length).to.be.equal(2)\n    expect(scope.new_data[2].criteria.length).to.be.equal(1)\n\n    #Check the available criteria types for each column and field\n    cur = 0\n    for c in scope.new_data[1].criteria[0].criteria\n      expect(c.criteria).to.be.equal(search_object.criteria_types.type1[cur].criteria)\n      expect(c.type).to.be.equal(search_object.criteria_types.type1[cur].type)\n      cur += 1\n\n    cur = 0\n    for c in scope.new_data[1].criteria[1].criteria\n      expect(c.criteria).to.be.equal(search_object.criteria_types.type3[cur].criteria)\n      expect(c.type).to.be.equal(search_object.criteria_types.type3[cur].type)\n      cur += 1\n\n    cur = 0\n    for c in scope.new_data[2].criteria[0].criteria\n      expect(c.criteria).to.be.equal(search_object.criteria_types.type2[cur].criteria)\n      expect(c.type).to.be.equal(search_object.criteria_types.type2[cur].type)\n      cur += 1\n\n    #Now check that the correct values are in the first column\n    c1crit0 = scope.new_data[1].criteria[0]\n    expect(c1crit0.field_name).to.be.equal('t3f1')\n    expect(c1crit0.table_name).to.be.equal('table3')\n    expect(c1crit0.type).to.be.equal('type1')\n    expect(c1crit0.criteria_chosen.criteria).to.equal('t1s2')\n    expect(c1crit0.chosen_value).to.be.equal('T3F1_value')\n\n    c1crit1 = scope.new_data[1].criteria[1]\n    expect(c1crit1.field_name).to.be.equal('t3f3')\n    expect(c1crit1.table_name).to.be.equal('table3')\n    expect(c1crit1.type).to.be.equal('type3')\n    expect(c1crit1.criteria_chosen.criteria).to.be.equal('t3s1')\n    expect(c1crit1.chosen_value).to.be.equal('T3F3_value')\n\n    #And now the second column\n    c2crit0 = scope.new_data[2].criteria[0]\n    expect(c2crit0.field_name).to.be.equal('t2f2')\n    expect(c2crit0.table_name).to.be.equal('table2')\n    expect(c2crit0.type).to.be.equal('type2')\n    expect(c2crit0.criteria_chosen.criteria).to.be.equal('t2s2')\n    expect(c2crit0.chosen_value).to.be.equal('T2F2_value')\n\n    expect(scope.new_data[0].fields[0].name).to.be.equal('t3f1')\n    expect(scope.new_data[0].fields[1].name).to.be.equal('t3f2')\n    expect(scope.new_data[0].fields[2].name).to.be.equal('t3f3')\n\n    expect(scope.new_data[1].selected_relationship).to.be.equal('table2')\n    expect(scope.new_data[1].fields[0].name).to.be.equal('t2f1')\n    expect(scope.new_data[1].fields[1].name).to.be.equal('t2f2')\n    expect(scope.new_data[1].fields[2].name).to.be.equal('t2f3')\n\n\n  it 'should return the type of field selected with value', () ->\n    # When we return the types when POSTing a new search it must be the\n    # selected type  - ie. we need to let each field know it's criteria type\n    handle_default_search_details_http()\n    scope.new_data = [{'criteria':[], 'chosen_table': 'random_table'}]\n    scope.new_data[0].criteria[0] = {\n      'chosen_value': 'some_value',\n      'criteria':[{'criteria':'TextCrit','type': 'text'},\n                  {'criteria':'NumberCrit','type': 'number'},\n                  {'criteria':'DateCrit','type': 'date'}],\n      'criteria_chosen': {'criteria':'NumberCrit','type': 'number'},\n      'field_name': 'a_column_field',\n      'logical_name': 'A Column Field',\n      'table_name': 'table_with_columns',\n      'link': ''\n    }\n\n    httpBackend.expectPOST('http://testserver/api/search/query', {\n      \"data\": [\n          [{\n            'field_name':'a_column_field',\n            'table_name':'table_with_columns',\n            'type': 'number',\n            'value': 'some_value',\n            'criteria': 'NumberCrit',\n            'link':''\n          }]\n      ],\n      \"table_name\": \"random_table\",\n      \"name\": \"save_query_name\",\n      \"search_id\": ''\n      }).respond(\n        {'status':'ok', 'id_search': 24}\n      )\n\n    scope.search_name = 'save_query_name'\n    scope.save_button_pressed()\n    httpBackend.flush()\n\n\n  #B86132088 - Columns without criteria are left empty\n  it 'should not ignore empty columns when posting to server', () ->\n    #Initial setup\n    handle_default_search_details_http()\n\n    #We need to set up a scope.new_data with an empty column (ie. no criteria)\n    scope.new_data = []\n    scope.new_data[0] = {\n      'chosen_table': 'table_1'\n      'fields': []\n      'logical_name': 'table_1'\n      'relationships':[]\n    }\n    scope.new_data[1] = {\n      'fields':[]\n      'relationships':[]\n      'selected_relationship': 'table_2'\n    }\n    scope.new_data[2] = {\n      'criteria':[{\n        'chosen_value': 'some_random_value'\n        'criteria_chosen': {'criteria':'tb2_crit1', 'type': 'made_up_type'},\n        'field_name': 'tbl2_field1'\n        'logical_name': 'tbl2_field1'\n        'table_name': 'table_2'\n        'link': ''\n      }]\n    }\n    httpBackend.expectPOST('http://testserver/api/search/query',{\n        \"data\": [\n                [], #Bug was this sub-array wasn't created\n                [{\n                  'field_name':'tbl2_field1',\n                  'table_name':'table_2',\n                  'type': 'made_up_type',\n                  'value': 'some_random_value',\n                  'criteria': 'tb2_crit1',\n                  'link':''}\n                ]],\n        \"table_name\": \"table_1\",\n        \"name\": \"save_query_name\",\n        \"search_id\": ''\n    }).respond(\n      {'status':'ok'}\n    )\n\n    scope.search_name = 'save_query_name'\n\n    #Act\n    scope.save_button_pressed()\n\n    #Assert - check we were called with expected params\n    httpBackend.flush()\n\n\n  get_data = () ->\n    criteria_types = {\n      'type1': [{'criteria': 't1s1', 'type':'1stTypeVar1'},\n                {'criteria': 't1s2', 'type':'1stTypeVar2'},\n                {'criteria': 't1s3', 'type':'1stTypeVar3'}]\n      'type2': [{'criteria': 't2s1', 'type':'2ndTypeVar1'},\n                {'criteria': 't2s2', 'type':'2ndTypeVar2'},\n                {'criteria': 't2s3', 'type':'2ndTypeVar3'}]\n      'type3': [{'criteria': 't3s1', 'type':'3rdTypeVar1'},\n                {'criteria': 't3s2', 'type':'3rdTypeVar2'},\n                {'criteria': 't3s3', 'type':'3rdTypeVar3'}]\n    }\n\n    criteria_enum =\n      t1s1: 't1s1_d'\n      t1s2: 't1s2_d'\n      t1s3: 't1s3_d'\n      t2s1: 't2s1_d'\n      t2s2: 't2s2_d'\n      t2s3: 't2s3_d'\n      t3s1: 't3s1_d'\n      t3s2: 't3s2_d'\n      t3s3: 't3s3_d'\n\n    table_list = ['table1', 'table2', 'table3']\n\n    table_metadata = {\n      'table1': {\n        'fields': [\n          {'name': 't1f1', 'type': 'type1', 'logical_name': 'Table 1 Field 1'}\n          {'name': 't1f2', 'type': 'type2', 'logical_name': 'Table 1 Field 2'}\n          {'name': 't1f3', 'type': 'type3', 'logical_name': 'Table 1 Field 3'}\n        ]\n        'logical_name': 'Table 1'\n        'relationships': []\n      }\n      'table2': {\n        'fields': [\n          {'name': 't2f1', 'type': 'type1', 'logical_name': 'Table 2 Field 1'}\n          {'name': 't2f2', 'type': 'type2', 'logical_name': 'Table 2 Field 2'}\n          {'name': 't2f3', 'type': 'type3', 'logical_name': 'Table 2 Field 3'}\n        ]\n        'logical_name': 'Table 2'\n        'relationships': ['table1']\n      }\n      'table3': {\n        'fields': [\n          {'name': 't3f1', 'type': 'type1', 'logical_name': 'Table 3 Field 1'}\n          {'name': 't3f2', 'type': 'type2', 'logical_name': 'Table 3 Field 2'}\n          {'name': 't3f3', 'type': 'type3', 'logical_name': 'Table 3 Field 3'}\n        ]\n        'logical_name': 'Table 3'\n        'relationships': ['table2']\n      }\n    }\n    values = {'start':'table3', 'body': [\n      [\n        {\n          table_name:'table3'\n          type:'type1'\n          link:''\n          criteria:'t1s2'\n          field_name:'t3f1'\n          value:'T3F1_value'\n        },\n        {\n          table_name:'table3'\n          type:'type3'\n          link:''\n          criteria:'t3s1'\n          field_name:'t3f3'\n          value:'T3F3_value'\n        }\n      ]\n      [\n        {\n          table_name:'table2'\n          type:'type2'\n          link:''\n          criteria:'t2s2'\n          field_name:'t2f2'\n          value:'T2F2_value'\n        }\n      ]\n    ]\n    }\n\n    return {\n      'criteria_types': criteria_types\n      'table_list': table_list\n      'table_metadata': table_metadata\n      'criteria_enum': criteria_enum\n      'values': values\n    }\n\n  ###################\n  # Directive Tests #\n  ###################\n  # TODO: check that the main code still works as we've added a div to ws-picker\n  it 'should create a suitable picker for the type inside ws-picker', () ->\n    handle_default_search_details_http()\n\n    # element = compile(\"<div ws-picker></div>\")(rootScope)\n    element = compile(\"<div ws-picker></div>\")(scope)\n\n    scope.criteria =\n      criteria_chosen: {criteria: 'crit1', type: ''}\n    # scope.criteria_chosen_type = ''\n    scope.$digest()\n    #With no type it should be an empty div\n    expect(element.html()).to.equal('<div class=\"ng-scope\"></div>')\n\n    # Text and Number fields should have a way of inputing those things\n    scope.criteria.criteria_chosen.type = 'text'\n    element = compile(\"<div ws-picker></div>\")(scope)\n    scope.$digest()\n    expect(element.html()).to.contain('<input type=\"text\"')\n\n    scope.criteria.criteria_chosen.type = 'number'\n    element = compile(\"<div ws-picker></div>\")(scope)\n    scope.$digest()\n    expect(element.html()).to.contain('<input type=\"number\"')\n\n    #Date picker is more complex to make it work accross many browsers\n    scope.criteria.criteria_chosen.type = 'date'\n    element = compile(\"<div ws-picker></div>\")(scope)\n    scope.$digest()\n    expect(element.html()).to.contain('<input type=\"text\"')\n    expect(element.html()).to.contain('glyphicon-calendar')\n    expect(element.html()).to.contain('<button type=\"button\"')\n\n\n  it 'should throw an error from ws-criteria-selector where correct attrs not passed in', () ->\n    handle_default_search_details_http()\n\n    # Check that we get errors thrown when we don't pass any attrs\n    expect(() ->\n      compile('<div ws-criteria-selector></div>')(rootScope)\n      rootScope.$digest()\n    ).to.throw()\n\n    # Check that we throw when we only pass one of the attrs\n    expect(() ->\n      compile('<div ws-criteria-selector data=\"some_var\"></div>')(rootScope)\n      rootScope.$digest()\n    ).to.throw()\n\n    # And now the other one\n    expect(() ->\n      compile('<div ws-criteria-selector selector=\"some_selector\"></div>')(rootScope)\n      rootScope.$digest()\n    ).to.throw()\n\n\n  it 'should update a suitable picker for the type inside ws-criteria-selector', () ->\n    handle_default_search_details_http()\n\n    scope.new_data = [{'criteria':[]}]\n    scope.new_data[0].criteria[0] = {\n      'chosen_value': 'some_value',\n      'criteria':[{'criteria':'TextCrit','type': 'text'},\n                  {'criteria':'NumberCrit','type': 'number'},\n                  {'criteria':'DateCrit','type': 'date'}],\n      'criteria_chosen': {'criteria': 'NumberCrit', 'type': 'number'},\n      'field_name': 'a_column_field',\n      'logical_name': 'A Column Field',\n      'table_name': 'table_with_columns',\n    }\n\n    element = compile('<div ws-criteria-selector data=\"new_data\" selector=\"data[0].criteria[0]\" />')(scope)\n    scope.$digest()\n\n    #Make sure that we have the right input type\n    expect(element.html()).to.contain('<input type=\"number\"')\n","markers":{"markers":{"1":{"id":1,"range":[[2,8],[2,8]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8,"goalBufferRange":null},"deserializer":"Marker"},"302":{"id":302,"range":[[13,0],[13,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"303":{"id":303,"range":[[15,0],[29,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"304":{"id":304,"range":[[42,0],[51,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"305":{"id":305,"range":[[58,0],[106,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"306":{"id":306,"range":[[108,0],[151,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"307":{"id":307,"range":[[153,0],[159,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"308":{"id":308,"range":[[161,0],[164,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"309":{"id":309,"range":[[165,0],[165,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"310":{"id":310,"range":[[167,0],[178,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"311":{"id":311,"range":[[179,0],[179,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"312":{"id":312,"range":[[181,0],[183,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"313":{"id":313,"range":[[184,0],[184,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"314":{"id":314,"range":[[186,0],[190,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"315":{"id":315,"range":[[191,0],[191,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"316":{"id":316,"range":[[193,0],[210,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"317":{"id":317,"range":[[220,0],[220,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"318":{"id":318,"range":[[222,0],[222,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"319":{"id":319,"range":[[244,0],[247,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"320":{"id":320,"range":[[249,0],[250,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"321":{"id":321,"range":[[252,0],[253,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"322":{"id":322,"range":[[255,0],[256,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"323":{"id":323,"range":[[258,0],[260,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"324":{"id":324,"range":[[266,0],[267,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"325":{"id":325,"range":[[317,0],[317,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"326":{"id":326,"range":[[324,0],[324,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"327":{"id":327,"range":[[332,0],[332,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"328":{"id":328,"range":[[348,0],[348,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"329":{"id":329,"range":[[355,0],[355,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"330":{"id":330,"range":[[356,0],[356,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"331":{"id":331,"range":[[358,0],[358,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"332":{"id":332,"range":[[362,0],[362,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"333":{"id":333,"range":[[367,0],[367,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"334":{"id":334,"range":[[384,0],[384,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"335":{"id":335,"range":[[388,0],[388,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"336":{"id":336,"range":[[406,0],[406,76]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"337":{"id":337,"range":[[407,0],[407,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"338":{"id":338,"range":[[409,0],[409,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"339":{"id":339,"range":[[413,0],[413,65]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"340":{"id":340,"range":[[439,0],[439,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"341":{"id":341,"range":[[453,0],[463,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"342":{"id":342,"range":[[531,0],[531,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"343":{"id":343,"range":[[538,0],[538,80]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"344":{"id":344,"range":[[540,0],[540,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"345":{"id":345,"range":[[542,0],[543,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"346":{"id":346,"range":[[545,0],[548,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"347":{"id":347,"range":[[550,0],[550,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"348":{"id":348,"range":[[553,0],[553,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"349":{"id":349,"range":[[558,0],[559,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"350":{"id":350,"range":[[564,0],[565,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"351":{"id":351,"range":[[571,0],[571,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"352":{"id":352,"range":[[573,0],[573,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"353":{"id":353,"range":[[583,0],[583,76]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"354":{"id":354,"range":[[589,0],[589,85]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"355":{"id":355,"range":[[593,0],[593,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"356":{"id":356,"range":[[595,0],[595,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"357":{"id":357,"range":[[597,0],[598,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"358":{"id":358,"range":[[603,0],[603,70]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"359":{"id":359,"range":[[604,0],[604,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"360":{"id":360,"range":[[606,0],[606,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"361":{"id":361,"range":[[609,0],[610,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1022":{"id":1022,"range":[[13,0],[13,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1023":{"id":1023,"range":[[15,0],[29,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1024":{"id":1024,"range":[[42,0],[51,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1025":{"id":1025,"range":[[58,0],[106,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1026":{"id":1026,"range":[[108,0],[151,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1027":{"id":1027,"range":[[153,0],[159,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1028":{"id":1028,"range":[[161,0],[164,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1029":{"id":1029,"range":[[165,0],[165,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1030":{"id":1030,"range":[[167,0],[178,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1031":{"id":1031,"range":[[179,0],[179,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1032":{"id":1032,"range":[[181,0],[183,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1033":{"id":1033,"range":[[184,0],[184,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1034":{"id":1034,"range":[[186,0],[190,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1035":{"id":1035,"range":[[191,0],[191,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1036":{"id":1036,"range":[[193,0],[210,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1037":{"id":1037,"range":[[220,0],[220,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1038":{"id":1038,"range":[[222,0],[222,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1039":{"id":1039,"range":[[244,0],[247,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1040":{"id":1040,"range":[[249,0],[250,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1041":{"id":1041,"range":[[252,0],[253,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1042":{"id":1042,"range":[[255,0],[256,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1043":{"id":1043,"range":[[258,0],[260,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1044":{"id":1044,"range":[[266,0],[267,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1045":{"id":1045,"range":[[317,0],[317,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1046":{"id":1046,"range":[[324,0],[324,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1047":{"id":1047,"range":[[332,0],[332,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1048":{"id":1048,"range":[[348,0],[348,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1049":{"id":1049,"range":[[355,0],[355,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1050":{"id":1050,"range":[[356,0],[356,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1051":{"id":1051,"range":[[358,0],[358,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1052":{"id":1052,"range":[[362,0],[362,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1053":{"id":1053,"range":[[367,0],[367,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1054":{"id":1054,"range":[[384,0],[384,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1055":{"id":1055,"range":[[388,0],[388,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1056":{"id":1056,"range":[[406,0],[406,76]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1057":{"id":1057,"range":[[407,0],[407,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1058":{"id":1058,"range":[[409,0],[409,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1059":{"id":1059,"range":[[413,0],[413,65]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1060":{"id":1060,"range":[[439,0],[439,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1061":{"id":1061,"range":[[453,0],[463,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1062":{"id":1062,"range":[[531,0],[531,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1063":{"id":1063,"range":[[538,0],[538,80]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1064":{"id":1064,"range":[[540,0],[540,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1065":{"id":1065,"range":[[542,0],[543,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1066":{"id":1066,"range":[[545,0],[548,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1067":{"id":1067,"range":[[550,0],[550,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1068":{"id":1068,"range":[[553,0],[553,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1069":{"id":1069,"range":[[558,0],[559,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1070":{"id":1070,"range":[[564,0],[565,53]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1071":{"id":1071,"range":[[571,0],[571,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1072":{"id":1072,"range":[[573,0],[573,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1073":{"id":1073,"range":[[583,0],[583,76]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1074":{"id":1074,"range":[[589,0],[589,85]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1075":{"id":1075,"range":[[593,0],[593,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1076":{"id":1076,"range":[[595,0],[595,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1077":{"id":1077,"range":[[597,0],[598,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1078":{"id":1078,"range":[[603,0],[603,70]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1079":{"id":1079,"range":[[604,0],[604,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1080":{"id":1080,"range":[[606,0],[606,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1081":{"id":1081,"range":[[609,0],[610,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/test/spec/controllers/search.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7b069cd6f1ba2246c605c0be981c5d6690e973f8","deserializer":"TextBuffer"},{"text":"// Karma configuration\n// Generated on Mon Jun 09 2014 11:33:27 GMT+0100 (BST)\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path, that will be used to resolve files and exclude\n    basePath: '',\n\n\n    // frameworks to use\n    frameworks: ['mocha','chai'],\n\n    plugins: ['karma-*'],\n\n    preprocessors: { '**/*.coffee': ['coffee']},\n\n    // list of files / patterns to load in the browser\n    files: [\n      'app/bower_components/jquery/jquery.js',\n      'app/bower_components/angular/angular.js',\n      'app/bower_components/angular-mocks/angular-mocks.js',\n      'app/bower_components/angular-resource/angular-resource.js',\n      'app/bower_components/angular-cookies/angular-cookies.js',\n      'app/bower_components/angular-sanitize/angular-sanitize.js',\n      'app/bower_components/angular-ui-router/release/angular-ui-router.js',\n      'app/bower_components/angular-bootstrap/ui-bootstrap-tpls.js',\n      'app/bower_components/angular-dimple/dist/angular-dimple.js',\n      'app/bower_components/ng-sortable/dist/ng-sortable.js',\n      'app/scripts/*.js',\n      'app/scripts/**/*.js',\n      'test/mock/**/*.js',\n      'test/spec/**/*.js',\n      'app/scripts/*.coffee',\n      'app/scripts/**/*.coffee',\n      'test/mock/**/*.coffee',\n      'test/spec/**/*.coffee'\n    ],\n\n\n    // list of files to exclude\n    exclude: [\n\n    ],\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress', 'junit', 'growl', 'coverage'\n    reporters: ['mocha'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO || config.LOG_DEBUG || config.LOG_WARN || config.LOG_ERROR,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // Start these browsers, currently available:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera (has to be installed with `npm install karma-opera-launcher`)\n    // - Safari (only Mac; has to be installed with `npm install karma-safari-launcher`)\n    // - PhantomJS\n    // - IE (only Windows; has to be installed with `npm install karma-ie-launcher`)\n    browsers: ['PhantomJS'],\n\n    // If browser does not capture in given timeout [ms], kill it\n    captureTimeout: 60000,\n\n\n    // Continuous Integration mode\n    // if true, it capture browsers, run tests and exit\n    singleRun: true\n  });\n};\n","markers":{"markers":{"1":{"id":1,"range":[[61,88],[61,88]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12,"goalBufferRange":null},"deserializer":"Marker"},"17":{"id":17,"range":[[13,0],[15,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[48,0],[48,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[61,0],[61,89]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"20":{"id":20,"range":[[13,0],[15,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[48,0],[48,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"22":{"id":22,"range":[[61,0],[61,89]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/karma.conf.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f2cef625bdeaecacd888b8d61c5cef4aa2dda61b","deserializer":"TextBuffer"},{"text":"{\n  \"name\": \"ws-userapp\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.2\",\n    \"grunt-autoprefixer\": \"~0.4.0\",\n    \"grunt-bower-install\": \"~0.7.0\",\n    \"grunt-concurrent\": \"~0.4.1\",\n    \"grunt-contrib-clean\": \"~0.5.0\",\n    \"grunt-contrib-coffee\": \"~0.12.0\",\n    \"grunt-contrib-compass\": \"~0.6.0\",\n    \"grunt-contrib-concat\": \"~0.3.0\",\n    \"grunt-contrib-connect\": \"~0.5.0\",\n    \"grunt-contrib-copy\": \"~0.4.1\",\n    \"grunt-contrib-cssmin\": \"~0.7.0\",\n    \"grunt-contrib-htmlmin\": \"~0.1.3\",\n    \"grunt-contrib-imagemin\": \"~0.3.0\",\n    \"grunt-contrib-jshint\": \"~0.7.1\",\n    \"grunt-contrib-uglify\": \"~0.2.0\",\n    \"grunt-contrib-watch\": \"~0.5.2\",\n    \"grunt-google-cdn\": \"~0.2.0\",\n    \"grunt-newer\": \"~0.5.4\",\n    \"grunt-ngmin\": \"~0.0.2\",\n    \"grunt-rev\": \"~0.1.0\",\n    \"grunt-svgmin\": \"~0.2.0\",\n    \"grunt-usemin\": \"~2.0.0\",\n    \"jshint-stylish\": \"~0.1.3\",\n    \"load-grunt-tasks\": \"~0.2.0\",\n    \"time-grunt\": \"~0.2.1\",\n    \"karma-ng-scenario\": \"^0.1.0\",\n    \"karma\": \"~0.12.0\",\n    \"karma-coffee-preprocessor\": \"^0.1.3\",\n    \"grunt-karma\": \"^0.7.2\",\n    \"karma-script-launcher\": \"^0.1.0\",\n    \"karma-chrome-launcher\": \"^0.1.2\",\n    \"karma-firefox-launcher\": \"^0.1.3\",\n    \"karma-html2js-preprocessor\": \"^0.1.0\",\n    \"karma-jasmine\": \"^0.1.5\",\n    \"requirejs\": \"^2.1.11\",\n    \"karma-requirejs\": \"^0.2.1\",\n    \"karma-phantomjs-launcher\": \"^0.1.2\",\n    \"karma-ng-html2js-preprocessor\": \"^0.1.0\",\n    \"grunt-coffeelint\": \"0.0.13\",\n    \"chai\": \"^1.9.0\",\n    \"karma-chai\": \"^0.1.0\",\n    \"mocha\": \"^1.17.1\",\n    \"karma-mocha\": \"^0.1.1\",\n    \"grunt-connect-proxy\": \"^0.1.8\",\n    \"connect-modrewrite\": \"^0.6.3-pre\",\n    \"karma-mocha-reporter\": \"~1.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.8.0\"\n  },\n  \"scripts\": {\n    \"test\": \"grunt test\"\n  }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":16,"goalBufferRange":null},"deserializer":"Marker"},"23":{"id":23,"range":[[10,0],[10,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"24":{"id":24,"range":[[43,0],[43,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"25":{"id":25,"range":[[49,0],[50,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"26":{"id":26,"range":[[10,0],[10,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"27":{"id":27,"range":[[43,0],[43,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"28":{"id":28,"range":[[49,0],[50,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"29":{"id":29,"range":[[0,0],[0,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"30":{"id":30,"range":[[58,0],[58,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/package.json","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8b8b637df9270a76db0dee58c07f5d291dd3f54c","deserializer":"TextBuffer"},{"text":"'use strict'\n\n##\n# Controller 'SearchCtrl'\n#\n# The SearchCtrl controller handles editing and saving a search.\n#\nangular.module('websandAngApp')\n  .controller 'SearchCtrl', ($scope, $location, $compile, $http) ->\n\n    $scope.max_level = 0\n    $scope.new_data = []\n    $scope.CRITERIA_TYPES = {}\n    $scope.CRITERIA_ENUM = {}\n    $scope.table_list = []\n    $scope.table_metadata = {}\n    $scope.search_name = ''\n    $scope.search_id = ''\n\n\n    ##\n    # Event listener 'login_success'\n    #\n    # FIXME: We need to do away with the 'login_success' event and actually fix\n    # the authentication using a promise.\n    #\n    # This event is received when the authentication token is recieved - it just\n    # refreshes the list.  Note that each 'page' also just sends the\n    # 'login_success' function on the local scope to trigger the activity on the\n    # page.\n    #\n    $scope.$on('login_success', ->\n      $scope.$emit('refresh_list')\n    )\n\n    # Are we able to set the name of the search?  Initially, no.\n    $scope.rename_disabled = false\n\n\n    ##\n    # Function member $scope.cancel_search_create()\n    #\n    # This is called from the 'cancel' button on the search edit page.\n    #\n    # It reconstructs the original search path from ret value with a campaign\n    # and audience.  Otherwise it just goes back to the generic showsearch path.\n    #\n    $scope.cancel_search_create = ->\n      ret = $location.search()['ret']\n      cam = $location.search()['c']\n      aud = $location.search()['a']\n\n      # build c=<cam>&a=<aud> search string\n      search_string = (\"#{k}=#{v}\" for own k, v of {c: cam, a: aud} when v).join('&')\n\n      #If we are requested to go somewhere else then go there instead\n      if ret\n        $location.path('/' + ret).search(search_string)\n        return\n\n      $location.path('/showsearch').search('')\n      return\n\n\n    ##\n    # Event listener on $scope 'refresh_list' message\n    #\n    # The 'refresh_list' event is triggered from the 'login_success' event - not\n    # entirely sure why they are split?  Anyway, this decodes whether there is a\n    # 'sid' parameter on the location path, and if so, fetches the data for that\n    # search and then simulates pressing the buttons using $scope.load_data()\n    #\n    $scope.$on 'refresh_list', ->\n      s_id = $location.search()['sid']\n      token = window.sessionStorage.getItem('urn:websandhq.co.uk/auth:instance:1')\n      server_url = window.sessionStorage.getItem('server_url')\n      url = server_url + 'api/search/details'\n      if(s_id)\n        url += '/' + s_id\n\n      if(token!=null)\n        $http({\n          url: url\n          method: 'GET'\n          headers: {'Authorization': \"JWT token=\\\"\" + token + \"\\\"\"}\n        }).success (data) ->\n          $scope.CRITERIA_TYPES = data.criteria_types\n          $scope.table_list = data.table_list\n          $scope.table_metadata = data.table_metadata\n          $scope.CRITERIA_ENUM = data.criteria_enum\n          $scope.FUNCTIONS_ENUM = data.functions_enum\n\n          # loop through the CRITERIA_TYPES and add in the CRITERIA_ENUM for\n          # each one\n          for own l, ct of $scope.CRITERIA_TYPES\n            for c in ct\n              c.friendly = $scope.CRITERIA_ENUM[c.criteria]\n              # also convert the array of functions into objects for the select\n              if c.functions?\n                new_f = [{func: '---', friendly: '<none>'}]\n                for f in c.functions\n                  if $scope.FUNCTIONS_ENUM[f]?\n                    new_f.push {func: f, friendly: $scope.FUNCTIONS_ENUM[f]}\n                c.functions = new_f\n              else\n                c.functions = []\n\n          if data.values\n            $scope.load_values(data.values)\n          if data.search_name\n            $scope.search_name = data.search_name\n            $scope.rename_disabled = true\n          if data.search_id\n            $scope.search_id = data.search_id\n\n          # DEBUG\n          console.log \"$scope.$on('refresh_list' ...\"\n          console.log data\n        .error (data,status) ->\n          console.log('Error getting search metadata')\n          return\n\n\n    ##\n    # Function member $scope.load_values(input)\n    #\n    # Load up a saved search.  This simulates the user clicking various buttons\n    # so that a saved search is recovered for editing.  The problem is that the\n    # saved search is missing information.  Thus this needs the saved search\n    # format to be altered.\n    #\n    # FIXME: this is broken with intermediate searches missing tables.\n    #\n    # WARNING: Not idempotent - modifies $scope.new_data[] and DOM as a\n    # sideffect\n    #\n    # @param inp - a saved search object indicating the tables/fields and their\n    #              criteria for the search.\n    $scope.load_values = (inp) ->\n      # We have been told to populate the table with values - so do that\n      if inp.start\n        $scope.table_clicked(inp.start)\n      else\n        console.log('Trying to load values but no table specified')\n        return\n\n      level = 1\n      for c in inp.body\n        if level!=1\n          $scope.relationship_clicked(c[0].table_name, c[0].table_name, level - 1)\n\n        for f in c\n          # console.log f\n          $scope.field_clicked(f.table_name, f.field_name, level, f.criteria, f.value, f.function)\n\n        level += 1\n\n      return\n\n\n    ##\n    # Function member $scope.table_clicked\n    #\n    # This function only gets called to set the first column up.\n    # Specifically, it sets up $scope.new_data[] to hold the search data.\n    #\n    # @param table_name - <string> physical table name\n    # @returns undefined\n    #\n    $scope.table_clicked = (table_name) ->\n\n      # Get rid of the old one if it's there (e.g. a previously selected table)\n      $scope.clear_all_levels_above(0)\n\n      # Set the possible search fields for the selected table on to level 0\n      $scope.new_data[0] = $scope.table_metadata[table_name]\n      $scope.new_data[0].chosen_table = table_name\n\n      level_1 = angular.element(\n        '<span id=\"ws_query_level_1\" class=\"ws_level_n\" />')\n      level_1.append(\"\"\"\n        <span>\n           <b>#{$scope.table_metadata[table_name].logical_name}</b>\n        </span>\n        <br>\"\"\")\n      for field in $scope.new_data[0].fields\n        level_1.append(\"\"\"\n          <button class='btn ws_table_button'\n                  ng-click='field_clicked(\"#{table_name}\", \"#{field.name}\", 1)'>\n            #{field.logical_name}\n          </button>\n          <br>\"\"\")\n      if $scope.new_data[0].relationships.length > 0\n        level_1.append(\"<b>Relationships:</b><br />\")\n        for r in $scope.new_data[0].relationships\n          level_1.append(\"\"\"\n          <button class='btn ws_table_button'\n                  ng-click='relationship_clicked(\"#{table_name}\", \"#{r.name}\", 1)'>\n            #{r.logical_name}\n          </button>\n          <br>\"\"\")\n\n      compiled_el = $compile(level_1)($scope)\n      $scope.new_data[0].compiled_el = compiled_el\n      angular.element(document.getElementById('ws_query_window'))\n      .append(compiled_el)\n\n      $scope.max_level = 1\n      return\n\n\n    ##\n    # Function member: $scope.clear_all_levels_above(level)\n    #\n    # Remove all the levels above $scope.max_level in new_data, killing off the\n    # elements as it goes and then sets the $scope.max_level to level.\n    #\n    # WARNING: modifies $scope.new_data[] as a sideffect of the function.\n    # WARNING: not idempotent.\n    #\n    # @returns undefined\n    #\n    $scope.clear_all_levels_above = (level) ->\n      for i in [$scope.max_level..level]\n        if $scope.new_data[i]?\n          $scope.compiled_el.remove() if $scope.compiled_el?\n          $scope.new_data[i] = null\n        angular.element(document.getElementById('ws_query_level_' + i)).remove()\n\n      # fix this!\n      $scope.new_data = $scope.new_data[..level]\n      $scope.max_level = level\n      return\n\n\n    ##\n    # Function Member: $scope.prune()\n    #\n    # WARNING: works via side effect on $scope.new_data\n    #\n    # This removes elements from $scope.new_data[...] if there are now fields,\n    # relations or criteria level on the level.  i.e. it kills a level when we\n    # click 'off' a criteria.\n    #\n    $scope.prune = () ->\n      #Run through all the new_data items and remove any with no attrs\n      $scope.new_data = $scope.new_data.filter (i) ->\n        if i != null and (i.fields == undefined or i.fields.length == 0) \\\n            and (i.relationships == undefined or i.relationships.length == 0) \\\n            and (i.criteria == undefined or i.criteria.length == 0)\n          i.compiled_el.remove() if i.compiled_el?\n          return false\n        return true\n      return\n\n\n    ##\n    # Function member: $scope.field_clicked\n    #\n    # This function is called when a field is clicked.  If the field already\n    # exists then we want to remove it, otherwise we want to add it into the\n    # list.\n    #\n    # This function is also used when rebuilding a search screen from a saved\n    # search. Hence, the sel_crit, val and chosen_function fields are optional\n    # for that usage.\n    #\n    # @param table_name - the physical table_name of the field clicked.\n    # @param field_name - the physical column name of the field clicked.\n    # @param level - <int> the column number (0 indexed)\n    # @param sel_crit - <string> selected criteria string (to auto select it)\n    # @param val - <string> the value if rebuilding from a saved search\n    # @param chosen_function - <string> the chosen function from a saved search\n    # @returns undefined\n    $scope.field_clicked = (table_name, field_name, level, sel_crit='', val='', current_function) ->\n      console.log \"in field_clicked, current_function passed is #{current_function}\"\n      $scope.new_data[level] ?= {}\n      $scope.new_data[level].criteria ?= []\n\n      n = level + 1\n      $scope.max_level = Math.max($scope.max_level, n)\n\n      bFoundItem = false\n      for c in $scope.new_data[level].criteria\n        if c.field_name == field_name and c.table_name == table_name\n          # The item is already in the list so we remove it\n          $scope.new_data[level].criteria =\n            $scope.new_data[level].criteria.filter((x) -> x isnt c)\n          bFoundItem = true\n          break\n\n      if not bFoundItem\n        # If no appropriate type is found then leave blank\n        # This is the column data type and not used for determining\n        # which picker should be used\n        type = ''\n        for t in $scope.table_metadata[table_name].fields\n          if t.name == field_name\n            type = t.type\n            logical_name = t.logical_name\n            break\n\n        # We have 'criteria_chosen' as the whole criteria object (e.g. type,\n        # friendly, etc.) so that the <select ...> is easier to write and we\n        # don't have to watch it to match the chosen type - it all comes in one\n        # package.\n        criteria_chosen = $scope.CRITERIA_TYPES[type][0]\n        for t in $scope.CRITERIA_TYPES[type]\n          if t.criteria == sel_crit\n            criteria_chosen = t\n            break\n\n        # Pick a function to be used if there are any functions available\n        chosen_function = undefined\n        if criteria_chosen.functions?\n          chosen_function = criteria_chosen.functions[0]?.func\n          # see if the current_function is one of them!\n          if current_function\n            for f in criteria_chosen.functions\n              if f.func == current_function\n                chosen_function = f.func\n                break\n\n        # FIXME: add the new criteria to the end - it would be much nicer if it\n        # was added at the same position as the field that was clicked.\n        $scope.new_data[level].criteria[$scope.new_data[level].criteria.length] =\n          'type': type\n          'criteria': $scope.CRITERIA_TYPES[type]\n          'criteria_chosen': criteria_chosen\n          'chosen_value': val\n          'link': ''\n          'table_name': table_name\n          'field_name': field_name\n          'logical_name': logical_name\n          'chosen_function': chosen_function\n\n      $scope.prune()\n      $scope.clear_all_levels_above(n)\n\n      if $scope.new_data[level] != undefined and $scope.new_data[level] != null\n        level_n = angular.element(\n          \"\"\"<span id=\"ws_query_level_#{n}\" class=\"ws_level_n background-color:lightblue\" />\"\"\")\n        .append($scope.get_column_html($scope, level, table_name, n))\n        compiled_el = $compile(level_n)($scope)\n        $scope.new_data[level].compiled_el = compiled_el\n        angular.element(document.getElementById('ws_query_window')).append(compiled_el)\n\n      return\n\n\n    ##\n    # Function member: $scope.get_column_html\n    #\n    # Construct a 'column' of HTML as a <string> for the user.  The column can\n    # contain:\n    #\n    # - 'criteria', which is the specification on a database column that the\n    #   search is composed of.\n    # - 'fields', which are the columns that the user can click on to then\n    #    specify the criteria (in the next column)\n    # - 'relationships', which are child table relationships that the user can\n    #   click on so that they can specify criteria in a child table.\n    #\n    # @param scope - the scope to use to grab 'new_data' (the data model for the\n    #                criteria)\n    # @param level - the level of the column (0 indexed)\n    # @param table_name - the table that the column represents.\n    # @param n - NOT ENTIRELY SURE: FIXME\n    #\n    $scope.get_column_html = (scope, level, table_name, n) ->\n      # construct the HTML to return in segments.\n      segments = []\n      d = scope.new_data[level]\n      m = scope.table_metadata\n      # compose the criteria elements\n      if d.criteria?\n        for c, index in d.criteria\n          segments.push(\"\"\"\n            <span>\n              <b>#{c.logical_name}</b>\n              <br />\n              [#{m[c.table_name].logical_name}]\n              <br />\n              <div ws-criteria-selector\n                   data=\"new_data\"\n                   selector=\"data[#{level}].criteria[#{index}]\" />\n              <br />\n            </span>\"\"\")\n      if d.selected_relationship != undefined && d.selected_relationship != ''\n        segments.push(\"<b>#{m[d.selected_relationship].logical_name}</b>\")\n      segments.push(\"<br />\")\n      if d.fields?.length > 0\n        for field in d.fields\n          segments.push(\"\"\"\n            <span>\n              <button class=\"btn ws_table_button\"\n                      ng-click=\"field_clicked('#{d.selected_relationship}', '#{field.name}', #{n})\">\n                #{field.logical_name}\n              </button>\n              <br />\n            </span>\"\"\")\n      if d.relationships?.length > 0\n        segments.push(\"<b>Relationships:</b><br />\")\n        for r in d.relationships\n          segments.push(\"\"\"\n            <span>\n              <button class=\"btn ws_table_button\"\n                      ng-click=\"relationship_clicked('#{table_name}', '#{r.name}', #{n})\">\n                #{r.logical_name}\n              </button>\n              <br />\n            </span>\"\"\")\n      return segments.join('')\n\n\n    ##\n    # Function Member: $scope.relationship_clicked\n    #\n    # This functions runs in response to a table name being clicked in the\n    # second column or higher.\n    #\n    # @param table_name - <string> physical table name that was clicked.\n    # @param field_name - <string> physical column name that was clicked\n    # @param level - <int> the level that was clicked on.\n    # @returns undefined\n    #\n    $scope.relationship_clicked = (table_name, field_name, level) ->\n      n = level + 1\n      $scope.new_data[level] ?= {}\n\n      $scope.max_level = Math.max($scope.max_level, n)\n      if $scope.new_data[level].selected_relationship == field_name\n        $scope.new_data[level].selected_relationship = ''\n        $scope.new_data[level].fields = []\n        $scope.new_data[level].relationships = []\n      else\n        $scope.new_data[level].selected_relationship = field_name\n        $scope.new_data[level].fields = $scope.table_metadata[field_name].fields\n        $scope.new_data[level].relationships = $scope.table_metadata[field_name].relationships\n\n      $scope.prune()\n\n      $scope.clear_all_levels_above(n)\n\n      if($scope.new_data[level]!=undefined and $scope.new_data[level]!=null)\n        level_n = angular.element(\n          \"\"\"<span id=\"ws_query_level_#{n}\" class=\"ws_level_n background-color:lightblue\" />\"\"\")\n        .append($scope.get_column_html($scope, level, table_name, n))\n        compiled_el = $compile(level_n)($scope)\n        $scope.new_data[level].compiled_el = compiled_el\n        angular.element(document.getElementById('ws_query_window')).append(compiled_el)\n\n      return\n\n\n    ##\n    # Function $scope.save_button_pressed\n    #\n    # Executes when the save button is pressed.  Takes the criteria that has\n    # been built up on $scope.new_data{} and builds a new structure to send to\n    # the backend.\n    #\n    # FIXME: the structure has a major bug: If the level has no criteria then\n    # the array element is empty which means that there is not information as to\n    # what the table was at that level.  This makes in possibly impossible to\n    # guarantee that the search can be produced properly on the backend - at the\n    # moment the backend simply guesses.\n    #\n    $scope.save_button_pressed = ->\n      #Check name for query - else we can't save\n      if $scope.new_data == undefined or $scope.new_data == null or $scope.new_data.length == 0\n        $('#ws_name_warning').html(\n          '<div style=\"color:red\">Please select a valid set of query parameters before continuing</div>')\n        return\n\n      if not $scope.search_name\n        $('#ws_name_warning').html(\n          '<div style=\"color:red\">Please enter a valid name</div>')\n        return\n      $('#ws_name_warning').html('')\n\n      #Package up the information and POST to server\n      post_data =\n        'data':[]\n        'table_name':$scope.new_data[0].chosen_table\n        'name': $scope.search_name\n        'search_id': $scope.search_id\n\n      for item, index in $scope.new_data\n        level_criteria = []\n        if item.criteria?\n          for c in item.criteria\n            new_val = \"\" + c.chosen_value.toString()\n\n            if c.criteria_chosen.type == 'date'\n              new_date = new Date(c.chosen_value)\n              day = new_date.getDate()\n              month = new_date.getMonth()+1\n              if month < 10\n                month = \"0\" + month\n              year = new_date.getFullYear()\n\n              new_val = year + '-' + month + '-' + day\n\n            criteria =\n              'field_name': c.field_name\n              'table_name': c.table_name\n              'type': c.criteria_chosen.type\n              'value': \"\" + new_val\n              'criteria': c.criteria_chosen.criteria\n              'link': c.link\n\n            # check whether we should have a chosen function?\n            if c.criteria_chosen.functions and c.criteria_chosen.functions.length\n              criteria.chosen_function = c.chosen_function\n\n            level_criteria[level_criteria.length] = criteria\n\n          post_data.data[post_data.data.length] = level_criteria\n        else if index != 0\n          #No criteria are selected so use a blank array - B86132088\n          post_data.data[post_data.data.length] = []\n\n      token = window.sessionStorage.getItem('urn:websandhq.co.uk/auth:instance:1')\n      server_url = window.sessionStorage.getItem('server_url')\n\n      if(token!=null)\n        $http({\n          url: server_url + 'api/search/query'\n          method: 'POST'\n          data: post_data\n          headers: {'Authorization': \"JWT token=\\\"\" + token + \"\\\"\"}\n        }).success( (data, status, heading, config) ->\n\n          if(data.status!='ok')\n            alert('Something has gone wrong please try again')\n          else\n            ret = $location.search()['ret']\n            cam = $location.search()['c']\n\n            if cam == undefined\n              cam = ''\n            else\n              cam = 'c=' + cam\n\n            search_string = cam + '&a=' + data.id_search\n            #If we are requested to go somewhere else then go there instead\n            if ret!=undefined and ret!=null and ret!=''\n              $location.path('/' + ret).search(search_string)\n              return\n\n            $location.path('/showsearch').search(search_string)\n            return\n\n        ).error ( (data,status) ->\n          #TODO:Replace with a nicer error message\n          console.log('Error posting the search query')\n          return\n        )\n      return\n\n    $scope.$emit('login_success')\n\n\n##\n# Directive wsCriteriaSelector deals with the user selecting a single criteria.\n#\n# It is used as follows:\n#\n# <div wsCriteriaSelector data=\"<something>\" selector=\"<a selector in data>\" />\n#\n# It creates a new scope and sets scope.criteria = scope.$eval(attr.selector)\n# This means that it doesn't need to know how the parent is organising\n# criteria as long as the criteria has the various fields on it.\n#\nangular.module('websandAngApp')\n.directive(\"wsCriteriaSelector\", ['$compile', ($compile) ->\n  directive = {}\n  directive.restrict = 'A'\n  directive.replace = true\n  directive.scope = {\n    data: \"=data\",\n  }\n  directive.compile = (tElem, tAttrs) ->\n    return {\n      pre: (scope, element, attr) ->\n\n        if not attr.data\n          throw new Error(\"Must set the data attribute\")\n        if not attr.selector\n          throw new Error(\"Must set a selector attribute\")\n\n        console.log \"In wsCriteriaSelector: scope.$id = #{scope.$id}\"\n        console.log scope\n        scope.criteria = scope.$eval(attr.selector)\n\n        # If it's a number picker then input must be a number\n        if scope.criteria.criteria_chosen.type in ['number', 'num_no_ag']\n          scope.criteria.chosen_value = parseInt(scope.criteria.chosen_value)\n\n        # Initially don't show aggregate functions\n        scope.criteria.functions_show = false\n\n        el = angular.element('<div />')\n        el.append(\"\"\"\n          <select ng-model='criteria.chosen_function'\n                  ng-options='opt.func as opt.friendly for opt in criteria.criteria_chosen.functions'\n                  ng-show='criteria.functions_show'>\n          </select>\"\"\")\n        el.append(\"\"\"\n          <select ng-model='criteria.criteria_chosen'\n                  ng-options='c as c.friendly for c in criteria.criteria'>\n          </select>\n          <br />\n          <div ws-picker></div>\"\"\")\n        compiled_el = $compile(el.contents())(scope)\n\n        element.append(compiled_el)\n\n        scope.$on '$destroy', ->\n          compiled_el.remove() if compiled_el?\n\n        return\n    }\n  return directive\n])\n\n\n##\n# Directive wsPicker - choose the input type for a criteria.\n#\n# This picks the correct input type for the criteria.\n#\nangular.module('websandAngApp').directive(\"wsPicker\", ['$compile', ($compile) ->\n  directive = {}\n  directive.restrict = 'A'\n  directive.replace = true\n  directive.scope = false     # share scope with parent wsCriteriaSector\n\n  directive.compile = (tElem, tAttrs) ->\n    return {\n      pre: (scope, element, attrs) ->\n        console.log \"scope in wsPicker is #{scope.$id}\"\n        console.log scope\n        console.log \"end of wsPicker attrs\"\n\n        scope.prev_element = null\n\n        remove_criteria_chosen_watcher = scope.$watch 'criteria.criteria_chosen', (newVal, oldVal) ->\n          el = angular.element('<div/>')\n\n          if scope.criteria.criteria_chosen.type == 'text'\n            el.append('<ws-text-picker></ws-text-picker>')\n          else if scope.criteria.criteria_chosen.type == 'date'\n            el.append('<ws-date-picker></ws-date-picker>')\n          else if scope.criteria.criteria_chosen.type == 'number'\n            el.append('<ws-number-picker></ws-number-picker>')\n          else if scope.criteria.criteria_chosen.type == 'num_no_ag'\n            el.append('<ws-num-no-ag-picker></ws-num-no-ag-picker>')\n          # else - leave area blank\n\n          # compiled_el = $compile(el.contents())(scope)\n          compiled_el = $compile(el)(scope)\n\n          #Keep track of the element so that we can remove it and not leak\n          if scope.prev_element != null\n            scope.prev_element.remove()\n\n          scope.prev_element = compiled_el\n          element.append(compiled_el)\n\n          # decide whether to show the aggregate functions\n          scope.criteria.functions_show =\n            if scope.criteria.criteria_chosen.functions? \\\n                and scope.criteria.criteria_chosen.functions.length > 0\n              true\n            else\n              false\n\n\n        scope.$on '$destroy', ->\n          if scope.prev_element?\n            scope.prev_element.remove()\n          remove_criteria_chosen_watcher()\n\n        return\n    }\n\n  return directive\n])\n\n\n##\n# Directive wsTextPicker - provide a text box for criteria\n#\nangular.module('websandAngApp').directive(\"wsTextPicker\", () ->\n  directive = {}\n  directive.restrict = 'E'\n  directive.replace = true\n  directive.scope = false\n\n  directive.template = '''\n    <input type=\"text\"\n           ng-model=\"criteria.chosen_value\"\n           class=\"ws_input ws_criteria_input\" />\n  '''\n  return directive\n)\n\n\n##\n# Directive wsDatePicker - enable picking a date, regardless of the browser.\n#\nangular.module('websandAngApp').directive(\"wsDatePicker\", ->\n  directive = {}\n  directive.restrict = 'E'\n  directive.replace = true\n  directive.scope = false\n\n  directive.link = (scope, element, attrs) ->\n    scope.datepicker_format = 'yyyy-MM-dd'\n    return\n\n  directive.template = '''\n    <span class=\"input-group\">\n      <input type=\"text\"\n             class=\"form-control\"\n             datepicker-popup=\"{{datepicker_format}}\"\n             ng-model=\"criteria.chosen_value\"\n             show-weeks=\"false\"\n             close-text=\"Close\" />\n      <span class=\"input-group-btn\">\n        <button type=\"button\" class=\"btn btn-default\" disabled>\n          <i class=\"glyphicon glyphicon-calendar\"></i>\n        </button>\n      </span>\n    </span>\n  '''\n  return directive\n)\n\n\n##\n# Directive wsNumberPicker - show a number picker for the criteria.\n#\nangular.module('websandAngApp').directive(\"wsNumberPicker\", ->\n  directive = {}\n  directive.restrict = 'E'\n  directive.replace = true\n  directive.scope = false\n\n  directive.template = '''\n    <input type=\"number\"\n           ng-model=\"criteria.chosen_value\"\n           class=\"ws_input ws_criteria_input\" />\n  '''\n  return directive\n)\n\n\n##\n# Directive wsNumNoAgPicker - pick a number but don't show the agregate\n# functions (at all).\n#\nangular.module('websandAngApp').directive(\"wsNumNoAgPicker\", ->\n  directive = {}\n  directive.restrict = 'E'\n  directive.replace = true\n  directive.scope = false\n\n  directive.template = '''\n    <input type=\"number\" ng-model=\"criteria.chosen_value\" class=\"ws_input ws_criteria_input\" />\n  '''\n  return directive\n)\n","markers":{"markers":{"1":{"id":1,"range":[[556,0],[556,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":20,"goalBufferRange":null},"deserializer":"Marker"},"377":{"id":377,"range":[[2,0],[6,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"378":{"id":378,"range":[[13,0],[13,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"379":{"id":379,"range":[[19,0],[30,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"380":{"id":380,"range":[[35,0],[35,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"381":{"id":381,"range":[[38,0],[47,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"382":{"id":382,"range":[[52,0],[53,85]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"383":{"id":383,"range":[[56,0],[56,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"384":{"id":384,"range":[[62,0],[62,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"385":{"id":385,"range":[[64,0],[137,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"386":{"id":386,"range":[[149,0],[149,82]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"387":{"id":387,"range":[[152,0],[153,98]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"388":{"id":388,"range":[[155,0],[155,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"389":{"id":389,"range":[[159,0],[168,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"390":{"id":390,"range":[[169,0],[169,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"391":{"id":391,"range":[[171,0],[172,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"392":{"id":392,"range":[[174,0],[176,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"393":{"id":393,"range":[[178,0],[203,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"394":{"id":394,"range":[[205,0],[205,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"395":{"id":395,"range":[[209,0],[209,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"396":{"id":396,"range":[[211,0],[222,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"397":{"id":397,"range":[[224,0],[226,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"398":{"id":398,"range":[[227,0],[227,80]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"399":{"id":399,"range":[[229,0],[230,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"400":{"id":400,"range":[[232,0],[232,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"401":{"id":401,"range":[[233,0],[233,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"402":{"id":402,"range":[[235,0],[253,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"403":{"id":403,"range":[[254,0],[254,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"404":{"id":404,"range":[[256,0],[280,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"405":{"id":405,"range":[[285,0],[285,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"406":{"id":406,"range":[[287,0],[287,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"407":{"id":407,"range":[[291,0],[294,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"408":{"id":408,"range":[[300,0],[324,71]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"409":{"id":409,"range":[[326,0],[334,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"410":{"id":410,"range":[[337,0],[337,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"411":{"id":411,"range":[[339,0],[345,87]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"412":{"id":412,"range":[[348,0],[348,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"413":{"id":413,"range":[[350,0],[425,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"414":{"id":414,"range":[[428,0],[428,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"415":{"id":415,"range":[[430,0],[430,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"416":{"id":416,"range":[[439,0],[439,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"417":{"id":417,"range":[[442,0],[442,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"418":{"id":418,"range":[[445,0],[450,87]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"419":{"id":419,"range":[[454,0],[467,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"420":{"id":420,"range":[[471,0],[472,105]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"421":{"id":421,"range":[[476,0],[477,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"422":{"id":422,"range":[[479,0],[479,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"423":{"id":423,"range":[[482,0],[485,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"424":{"id":424,"range":[[486,0],[486,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"425":{"id":425,"range":[[494,0],[494,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"426":{"id":426,"range":[[504,0],[516,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"427":{"id":427,"range":[[532,0],[533,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"428":{"id":428,"range":[[563,0],[576,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"429":{"id":429,"range":[[580,0],[583,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"430":{"id":430,"range":[[587,0],[620,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"431":{"id":431,"range":[[627,0],[632,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"432":{"id":432,"range":[[637,0],[637,72]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"433":{"id":433,"range":[[639,0],[639,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"434":{"id":434,"range":[[642,0],[645,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"435":{"id":435,"range":[[648,0],[648,101]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"436":{"id":436,"range":[[651,0],[651,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"437":{"id":437,"range":[[653,0],[653,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"438":{"id":438,"range":[[655,0],[658,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"439":{"id":439,"range":[[661,0],[662,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"440":{"id":440,"range":[[668,0],[685,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"441":{"id":441,"range":[[691,0],[694,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"442":{"id":442,"range":[[699,0],[699,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"443":{"id":443,"range":[[702,0],[704,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"444":{"id":444,"range":[[709,0],[713,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"445":{"id":445,"range":[[717,0],[717,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"446":{"id":446,"range":[[720,0],[720,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"447":{"id":447,"range":[[725,0],[736,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"448":{"id":448,"range":[[741,0],[745,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"449":{"id":449,"range":[[749,0],[749,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"450":{"id":450,"range":[[751,0],[768,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"451":{"id":451,"range":[[771,0],[771,95]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1502":{"id":1502,"range":[[2,0],[6,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1503":{"id":1503,"range":[[13,0],[13,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1504":{"id":1504,"range":[[19,0],[30,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1505":{"id":1505,"range":[[35,0],[35,64]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1506":{"id":1506,"range":[[38,0],[47,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1507":{"id":1507,"range":[[52,0],[53,85]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1508":{"id":1508,"range":[[56,0],[56,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1509":{"id":1509,"range":[[62,0],[62,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1510":{"id":1510,"range":[[64,0],[137,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1511":{"id":1511,"range":[[149,0],[149,82]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1512":{"id":1512,"range":[[152,0],[153,98]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1513":{"id":1513,"range":[[155,0],[155,18]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1514":{"id":1514,"range":[[159,0],[168,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1515":{"id":1515,"range":[[169,0],[169,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1516":{"id":1516,"range":[[171,0],[172,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1517":{"id":1517,"range":[[174,0],[176,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1518":{"id":1518,"range":[[178,0],[203,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1519":{"id":1519,"range":[[205,0],[205,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1520":{"id":1520,"range":[[209,0],[209,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1521":{"id":1521,"range":[[211,0],[222,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1522":{"id":1522,"range":[[224,0],[226,35]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1523":{"id":1523,"range":[[227,0],[227,80]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1524":{"id":1524,"range":[[229,0],[230,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1525":{"id":1525,"range":[[232,0],[232,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1526":{"id":1526,"range":[[233,0],[233,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1527":{"id":1527,"range":[[235,0],[253,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1528":{"id":1528,"range":[[254,0],[254,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1529":{"id":1529,"range":[[256,0],[280,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1530":{"id":1530,"range":[[285,0],[285,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1531":{"id":1531,"range":[[287,0],[287,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1532":{"id":1532,"range":[[291,0],[294,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1533":{"id":1533,"range":[[300,0],[324,71]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1534":{"id":1534,"range":[[326,0],[334,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1535":{"id":1535,"range":[[337,0],[337,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1536":{"id":1536,"range":[[339,0],[345,87]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1537":{"id":1537,"range":[[348,0],[348,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1538":{"id":1538,"range":[[350,0],[425,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1539":{"id":1539,"range":[[428,0],[428,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1540":{"id":1540,"range":[[430,0],[430,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1541":{"id":1541,"range":[[439,0],[439,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1542":{"id":1542,"range":[[442,0],[442,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1543":{"id":1543,"range":[[445,0],[450,87]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1544":{"id":1544,"range":[[454,0],[467,5]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1545":{"id":1545,"range":[[471,0],[472,105]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1546":{"id":1546,"range":[[476,0],[477,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1547":{"id":1547,"range":[[479,0],[479,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1548":{"id":1548,"range":[[482,0],[485,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1549":{"id":1549,"range":[[486,0],[486,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1550":{"id":1550,"range":[[494,0],[494,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1551":{"id":1551,"range":[[504,0],[516,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1552":{"id":1552,"range":[[532,0],[533,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1553":{"id":1553,"range":[[563,0],[576,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1554":{"id":1554,"range":[[580,0],[583,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1555":{"id":1555,"range":[[587,0],[620,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1556":{"id":1556,"range":[[627,0],[632,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1557":{"id":1557,"range":[[637,0],[637,72]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1558":{"id":1558,"range":[[639,0],[639,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1559":{"id":1559,"range":[[642,0],[645,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1560":{"id":1560,"range":[[648,0],[648,101]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1561":{"id":1561,"range":[[651,0],[651,58]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1562":{"id":1562,"range":[[653,0],[653,63]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1563":{"id":1563,"range":[[655,0],[658,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1564":{"id":1564,"range":[[661,0],[662,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1565":{"id":1565,"range":[[668,0],[685,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1566":{"id":1566,"range":[[691,0],[694,1]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1567":{"id":1567,"range":[[699,0],[699,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1568":{"id":1568,"range":[[702,0],[704,48]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1569":{"id":1569,"range":[[709,0],[713,60]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1570":{"id":1570,"range":[[717,0],[717,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1571":{"id":1571,"range":[[720,0],[720,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1572":{"id":1572,"range":[[725,0],[736,11]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1573":{"id":1573,"range":[[741,0],[745,62]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1574":{"id":1574,"range":[[749,0],[749,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1575":{"id":1575,"range":[[751,0],[768,25]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"1576":{"id":1576,"range":[[771,0],[771,95]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/app/scripts/controllers/search.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3b2955ee11a70c0cb32e1383a673dc74b8301d19","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/Gruntfile.js","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/test/spec/controllers/search.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":true,"editorWidthInChars":null,"scrollTop":482,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/karma.conf.js","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/package.json","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":20,"softTabs":true,"displayBuffer":{"id":21,"softWrapped":true,"editorWidthInChars":null,"scrollTop":9374,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/app/scripts/controllers/search.coffee","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/app/scripts/controllers/search.coffee","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript","language-coffee-script","language-json","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/Gruntfile.js":1425732507325,"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/test/spec/controllers/search.coffee":1425732507589,"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/karma.conf.js":1425732507673,"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/package.json":1425732507756,"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp/app/scripts/controllers/search.coffee":1425732507973},"metrics":{"sessionLength":22578},"tree-view":{"directoryExpansionStates":[{}],"selectedPath":"/Users/alex/Projects/Websand/devops3/development/src/websand3-userapp/ws-userapp","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}